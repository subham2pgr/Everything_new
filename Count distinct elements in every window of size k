Count distinct elements in every window of size k
An Efficient Solution is to use the count of the previous window while sliding the window. The idea is to create a hash map that stores elements of the current window. When we slide the window, we remove an element from the hash and add an element. We also keep track of distinct elements. Below is the algorithm.

Create an empty hash map. Let hash map be hM
Initialize distinct element count ‘dist_count’ as 0.
Traverse through the first window and insert elements of the first window to hM. The elements are used as key and their counts as the value in hM. Also, keep updating ‘dist_count’
Print ‘dist_count’ for the first window.
Traverse through the remaining array (or other windows).
Remove the first element of the previous window.
If the removed element appeared only once, remove it from hM and do “dist_count–“
else (appeared multiple times in hM), then decrement its count in hM
Add the current element (last element of the new window)
If the added element is not present in hM, add it to hM and do “dist_count++”
Else (the added element appeared multiple times), increment its count in hM
Below is a dry run of the above approach:



Below is the implementation of the above approach:
filter_none
edit
play_arrow

brightness_4
// An efficient C++ program to  
// count distinct elements in 
// every window of size k 
#include <iostream> 
#include <map> 
using namespace std; 
  
void countDistinct(int arr[], int k, int n) 
{ 
    // Creates an empty hashmap hm 
    map<int, int> hm; 
  
    // initialize distinct element count for current window 
    int dist_count = 0; 
  
    // Traverse the first window and store count 
    // of every element in hash map 
    for (int i = 0; i < k; i++) 
    { 
       if (hm[arr[i]] == 0) 
       { 
           dist_count++; 
       } 
    hm[arr[i]] += 1; 
    } 
  
   // Print count of first window 
  cout << dist_count << endl; 
  
   // Traverse through the remaining array 
   for (int i = k; i < n; i++) 
   { 
     // Remove first element of previous window 
     // If there was only one occurrence, then reduce distinct count. 
     if (hm[arr[i-k]] == 1) 
     { 
        dist_count--; 
     } 
   // reduce count of the removed element 
     hm[arr[i-k]] -= 1; 
  
   // Add new element of current window 
   // If this element appears first time, 
   // increment distinct element count 
  
    if (hm[arr[i]] == 0) 
    { 
       dist_count++; 
    } 
    hm[arr[i]] += 1; 
  
  // Print count of current window 
    cout << dist_count << endl; 
  } 
} 
  
int main() 
{ 
   int arr[] = {1, 2, 1, 3, 4, 2, 3}; 
   int size = sizeof(arr)/sizeof(arr[0]); 
   int k = 4; 
   countDistinct(arr, k, size); 
  
   return 0; 
} 
//This solution is contributed by Aditya Goel 
Output:

3
4
4
3
Time complexity of the above solution is O(n).
