Given two arrays a[] and b[], the task is to find the count of all pairs (a[i], b[j]) such that a[i] + b[j] is unique among all the pairs i.e. if two pairs have equal sum then only one will be counted in the result.

Examples:

Input: a[] = {3, 3}, b[] = {3}
Output: 1
The two possible pairs are (a[0], b[0]) and (a[1], b[0]).
Pair 1: 3 + 3 = 6
Pair 2: 3 + 3 = 6



 

Input: a[] = {12, 2, 7}, b[] = {4, 3, 8}
Output: 7

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Approach: Initialise count = 0 and run two loops to consider all possible pairs and store the sum of every pair in an unordered_set to check whether the sum has been obtained before. If it has then ignore the current pair else increment the count.

Below is the implementation of the above approach:
filter_none
edit
play_arrow

brightness_4
// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 
  
// Function to return the count 
// of pairs with distinct sum 
int countPairs(int a[], int b[], int n, int m) 
{ 
  
    // To store the required count 
    int cnt = 0; 
  
    // Set to store the sum 
    // obtained for each pair 
    unordered_set<int> s; 
  
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
  
            // Sum of the current pair 
            int sum = a[i] + b[j]; 
  
            // If the sum obtained is distinct 
            if (s.count(sum) == 0) { 
  
                // Increment the count 
                cnt++; 
  
                // Insert sum in the set 
                s.insert(sum); 
            } 
        } 
    } 
  
    return cnt; 
} 
  
// Driver code 
int main() 
{ 
    int a[] = { 12, 2, 7 }; 
    int n = sizeof(a) / sizeof(a[0]); 
    int b[] = { 4, 3, 8 }; 
    int m = sizeof(b) / sizeof(b[0]); 
  
    cout << countPairs(a, b, n, m); 
  
    return 0; 
} 
Output:
7
