n Efficient Solution can compute all sums in O(R x C + n) time. The idea is to precompute total sum, row and column sums before processing the given array of indexes. Below are details
1. Calculate sum of matrix, call it sum.
2. Calculate sum of individual rows and columns. (row[] and col[])
3. For a cell index (i, j), the desired sum will be “sum- row[i] – col[j] + arr[i][j]”

Below is the implementation of above idea.

filter_none

edit

play_arrow

brightness_4
// An efficient C++ program to compute sum for given array of cell indexes 
#include<bits/stdc++.h> 
#define R 3 
#define C 3 
using namespace std; 
  
// A structure to represent a cell index 
struct Cell 
{ 
    int r; // r is row, varies from 0 to R-1 
    int c; // c is column, varies from 0 to C-1 
}; 
  
void printSums(int mat[][C], struct Cell arr[], int n) 
{ 
    int sum = 0; 
    int row[R] = {}; 
    int col[C] = {}; 
  
    // Compute sum of all elements, sum of every row and sum every column 
    for (int i=0; i<R; i++) 
    { 
      for (int j=0; j<C; j++) 
       { 
             sum += mat[i][j]; 
             col[j] += mat[i][j]; 
             row[i] += mat[i][j]; 
       } 
    } 
  
    // Compute the desired sum for all given cell indexes 
    for (int i=0; i<n; i++) 
    { 
        int ro = arr[i].r, co = arr[i].c; 
        cout << sum - row[ro] - col[co] + mat[ro][co] << endl; 
    } 
} 
  
// Driver program to test above function 
int main() 
{ 
    int mat[][C] = {{1, 1, 2}, {3, 4, 6}, {5, 3, 2}}; 
    struct Cell arr[] = {{0, 0}, {1, 1}, {0, 1}}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    printSums(mat, arr, n); 
    return 0; 
} 

Output:

15
10
16

Time Complexity: O(R x C + n)
Auxiliary Space: O(R + C)
