Another approach suggested by Abhishek Sharma 44. Add each number once and multiply the sum by 3, we will get thrice the sum of each element of the array. Store it as thrice_sum. Subtract the sum of the whole array from the thrice_sum and divide the result by 2. The number we get is the required number (which appears once in the array).

Array [] : [a, a, a, b, b, b, c, c, c, d]
Mathematical Equation = ( 3*(a+b+c+d) – (a + a + a + b + b + b + c + c + c + d) ) / 2

In more simple words: ( 3*(sum_of_array_without_duplicates) – (sum_of_array) ) / 2

let arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 3}
Required no = ( 3*(sum_of_array_without_duplicates) - (sum_of_array) ) / 2
            = ( 3*(12 + 1 + 3 + 2) - (12 + 1 + 12 + 3 + 12 + 1 + 1 + 2 + 3 + 3))/2 
            = ( 3*     18          -      50) / 2
            = (54 - 50) / 2
            = 2 (required answer)
As we know that set does not contain any duplicate element,
But,std::set is commonly implemented as a red-black binary search tree. Insertion on this data structure has a worst-case of O(log(n)) complexity, as the tree is kept balanced. we will be using set here.

Below is the implementation of above approach:
filter_none
edit
play_arrow

brightness_4
// C++ program to find the element  
// that occur only once 
  
#include <bits/stdc++.h> 
using namespace std; 
  
//function which find number  
int singleNumber(int a[],int n) 
{ 
    unordered_set<int> s(a,a+n); 
      
    int arr_sum=accumulate(a, a+n,0);//sum of array 
      
    int set_sum  = accumulate(s.begin(), s.end(),0);//sum of set 
      
    //applying the formula. 
    return (3*set_sum-arr_sum)/2; 
      
} 
  
//driver function 
int main() { 
   int a[]={12, 1, 12, 3, 12, 1, 1, 2, 3, 2, 2, 3, 7}; 
     
   int n=sizeof(a) / sizeof(a[0]); 
     
   cout<<"The element with single occurrence is "<<singleNumber(a,n); 
} 
  
//This code is contributed by Mohit Kumar 29 (IIIT gwalior) 

Output :
The element with single occurrence is 7
Time Complexity: O(Nlog(N))
Auxiliary Space: O(N)
