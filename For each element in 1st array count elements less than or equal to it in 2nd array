For each element in 1st array count elements less than or equal to it in 2nd array
Efficient Approach: Sort the elements of 2nd array, i.e., array arr2[]. Then perform a modified binary search on array arr2[]. For each element x of array arr1[], find the last index of the largest element smaller than or equal to x in sorted array arr2[].

filter_none

edit

play_arrow

brightness_4
// C++ implementation of For each element in 1st  
// array count elements less than or equal to it 
// in 2nd array 
#include <bits/stdc++.h> 
  
using namespace std; 
  
// function returns the index of largest element  
// smaller than equal to 'x' in 'arr'. For duplicates 
// it returns the last index of occurrence of required 
// element. If no such element exits then it returns -1.  
int binary_search(int arr[], int l, int h, int x) 
{ 
    while (l <= h) 
    { 
        int mid = (l+h) / 2; 
  
        // if 'x' is greater than or equal to arr[mid],  
        // then search in arr[mid+1...h] 
        if (arr[mid] <= x) 
            l = mid + 1; 
  
        // else search in arr[l...mid-1]     
        else
            h = mid - 1;     
    } 
      
    // required index 
    return h; 
} 
  
// function to count for each element in 1st array, 
// elements less than or equal to it in 2nd array 
void countEleLessThanOrEqual(int arr1[], int arr2[],  
                             int m, int n) 
{ 
    // sort the 2nd array 
    sort(arr2, arr2+n); 
      
    // for each element of 1st array 
    for (int i=0; i<m; i++) 
    { 
        // last index of largest element  
        // smaller than or equal to x 
        int index = binary_search(arr2, 0, n-1, arr1[i]); 
          
        // required count for the element arr1[i] 
        cout << (index+1) << " "; 
    } 
} 
  
// Driver program to test above 
int main() 
{ 
    int arr1[] = {1, 2, 3, 4, 7, 9}; 
    int arr2[] = {0, 1, 2, 1, 1, 4}; 
    int m = sizeof(arr1) / sizeof(arr1[0]); 
    int n = sizeof(arr2) / sizeof(arr2[0]); 
    countEleLessThanOrEqual(arr1, arr2, m, n); 
    return 0; 
}  

Output:

4 5 5 6 6 6

Time Complexity: O(mlogn + nlogn), considering arr1[] and arr2[] are of sizes m and n respectively.
