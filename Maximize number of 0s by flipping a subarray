how to explain the concept?
Maximize number of 0s by flipping a subarray
This problem can be reduced to largest subarray sum problem. The idea is to consider every 0 as -1 and every 1 as 1, find the sum of largest subarray sum in this modified array. This sum is our required max_diff ( count of 0s â€“ count of 1s in any subarray). Finally we return the max_diff plus count of zeros in original array.
filter_none
edit
play_arrow

brightness_4
// C++ program to maximize number of zeroes in a 
// binary array by at most one flip operation 
#include<bits/stdc++.h> 
using namespace std; 
  
// A Kadane's algorithm based solution to find maximum 
// number of 0s by flipping a subarray. 
int findMaxZeroCount(bool arr[], int n) 
{ 
    // Initialize count of zeros and maximum difference 
    // between count of 1s and 0s in a subarray 
    int orig_zero_count = 0; 
  
    // Initiale overall max diff for any subarray 
    int max_diff = 0; 
  
    // Initialize current diff 
    int curr_max = 0; 
  
    for (int i=0; i<n; i++) 
    { 
        // Count of zeros in original array (Not related 
        // to Kadane's algorithm) 
        if (arr[i] == 0) 
           orig_zero_count++; 
  
        // Value to be considered for finding maximum sum 
        int val = (arr[i] == 1)? 1 : -1; 
  
        // Update current max and max_diff 
        curr_max = max(val, curr_max + val); 
        max_diff = max(max_diff, curr_max); 
    } 
    max_diff = max(0, max_diff); 
  
    return orig_zero_count + max_diff; 
} 
  
// Driver program 
int main() 
{ 
    bool arr[] = {0, 1, 0, 0, 1, 1, 0}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    cout << findMaxZeroCount(arr, n); 
    return 0; 
} 

Output :
6

