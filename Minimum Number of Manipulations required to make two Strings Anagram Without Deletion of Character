Minimum Number of Manipulations required to make two Strings Anagram Without Deletion of Character
Given two strings s1 and s2, we need to find the minimum number of manipulations required to make two strings anagram without deleting any character.
Note:- The anagram strings have same set of characters, sequence of characters can be different.
If deletion of character is allowed and cost is given, refer to Minimum Cost To Make Two Strings Identical

Question Source: Yatra.com Interview Experience | Set 7
Examples:

Input : 
       s1 = "aba"
       s2 = "baa"
Output : 0
Explanation: Both String contains identical characters

Input :
       s1 = "ddcf"
       s2 = "cedk"
Output : 2
Explanation : Here, we need to change two characters
in either of the strings to make them identical. We 
can change 'd' and 'f' in s1 or 'e' and 'k' in s2.
Assumption: Length of both the Strings is considered similar


 

Recommended: Please solve it on “PRACTICE ” first, before moving on to the solution.
filter_none
edit
play_arrow

brightness_4
// C++ Program to find minimum number  
// of manipulations required to make  
// two strings identical  
#include <bits/stdc++.h>  
using namespace std;  
  
    // Counts the no of manipulations  
    // required  
    int countManipulations(string s1, string s2)  
    {  
          
        int count = 0;  
  
        // store the count of character  
        int char_count[26];  
          
        for (int i = 0; i < 26; i++){ 
            char_count[i] = 0; 
        } 
  
        // iterate though the first String  
        // and update count  
        for (int i = 0; i < s1.length(); i++)  
            char_count[s1[i] - 'a']++;  
  
        // iterate through the second string  
        // update char_count.  
        // if character is not found in  
        // char_count then increase count  
        for (int i = 0; i < s2.length(); i++){  
            char_count[s2[i] - 'a']--; 
            if (char_count[s2[i] - 'a'] < 0)  
                count++;  
        } 
        return count;  
    }  
  
    // Driver code  
    int main()  
    {  
  
        string s1 = "ddcf";  
        string s2 = "cedk";  
          
        cout<<countManipulations(s1, s2);  
    }  
   
// This code is contributed by vt_m. 

Output:
2
Time Complexity : O(n), where n is the length of the string.
