Next greater element in same order as input
Given an array, print the Next Greater Element (NGE) for every element. The Next greater Element for an element x is the first greater element on the right side of x in array. Elements for which no greater element exist, consider next greater element as -1. The next greater elements should be printed in same order as input array.

Examples:

Input : arr[] = [4, 5, 2, 25}
Output : 5 25 25 -1



 

Input : arr[] = [4, 5, 2, 25, 10}
Output : 5 25 25 -1 -1

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
We have discussed a solution here that does not print same order. Here we traverse array from rightmost element.

In this approach we have started iterating from the last element(nth) to the first(1st) element
The benefit is that when we arrive at a certain index his next greater element will be already in stack and we can directly get this element while at the same index.
After reaching a certain index we will pop the stack till we get the greater element on top from the current element and that element will be the answer for current element
If stack gets empty while doing the pop operation then the answer would be -1
Then we will stored the answer in an array for the current index.
Below is the implementation of above approach:
filter_none
edit
play_arrow

brightness_4
// A Stack based C++ program to find next 
// greater element for all array elements 
// in same order as input. 
#include <bits/stdc++.h> 
using namespace std; 
  
/* prints element and NGE pair for all   
elements of arr[] of size n */
void printNGE(int arr[], int n) 
{ 
    stack<int> s; 
  
    int arr1[n]; 
  
    // iterating from n-1 to 0 
    for (int i = n - 1; i >= 0; i--)  
    { 
        /*We will pop till we get the  
        greater element on top or stack gets empty*/
        while (!s.empty() && s.top() <= arr[i]) 
            s.pop(); 
  
        /*if stack gots empty means there  
        is no element on right which is greater  
        than the current element. 
        if not empty then the next greater  
        element is on top of stack*/
        if (s.empty())  
            arr1[i] = -1;          
        else 
            arr1[i] = s.top();         
  
        s.push(arr[i]); 
    } 
  
    for (int i = 0; i < n; i++) 
        cout << arr[i] << " ---> " << arr1[i] << endl; 
} 
  
/* Driver program to test above functions */
int main() 
{ 
    int arr[] = { 11, 13, 21, 3 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    printNGE(arr, n); 
    return 0; 
} 

Output :
11 -- 13
13 -- 21
21 -- -1
3 -- -1
Time Complexity: O(n)
Auxiliary Space: O(n) There is no extra space required if you want to print the next greater of each element in reverse order of input(means first, for the last element and then for second last and so on till the first element)



Method 2 (Using Stack)

Push the first element to stack.
Pick rest of the elements one by one and follow the following steps in loop.
Mark the current element as next.
If stack is not empty, compare top element of stack with next.
If next is greater than the top element,Pop element from stack. next is the next greater element for the popped element.
Keep popping from the stack while the popped element is smaller than next. next becomes the next greater element for all such popped elements
Finally, push the next in the stack.
After the loop in step 2 is over, pop all the elements from stack and print -1 as next element for them.
Below image is a dry run of the above approach:



Below is the implementation of the above approach:

filter_none
edit
play_arrow

brightness_4
       
// A Stack based C++ program to find next 
// greater element for all array elements. 
#include <bits/stdc++.h> 
using namespace std; 
  
/* prints element and NGE pair for all 
elements of arr[] of size n */
void printNGE(int arr[], int n) { 
  stack < int > s; 
  
  /* push the first element to stack */
  s.push(arr[0]); 
  
  // iterate for rest of the elements 
  for (int i = 1; i < n; i++) { 
  
    if (s.empty()) { 
      s.push(arr[i]); 
      continue; 
    } 
  
    /* if stack is not empty, then 
       pop an element from stack. 
       If the popped element is smaller 
       than next, then 
    a) print the pair 
    b) keep popping while elements are 
    smaller and stack is not empty */
    while (s.empty() == false && s.top() < arr[i]) 
    {          
        cout << s.top() << " --> " << arr[i] << endl; 
        s.pop(); 
    } 
  
    /* push next to stack so that we can find 
    next greater for it */
    s.push(arr[i]); 
  } 
  
  /* After iterating over the loop, the remaining 
  elements in stack do not have the next greater 
  element, so print -1 for them */
  while (s.empty() == false) { 
    cout << s.top() << " --> " << -1 << endl; 
    s.pop(); 
  } 
} 
  
/* Driver program to test above functions */
int main() { 
  int arr[] = {11, 13, 21, 3}; 
  int n = sizeof(arr) / sizeof(arr[0]); 
  printNGE(arr, n); 
  return 0; 
}

Output:
 11 -- 13
 13 -- 21
 3 -- -1
 21 -- -1
Time Complexity: O(n).
The worst case occurs when all elements are sorted in decreasing order. If elements are sorted in decreasing order, then every element is processed at most 4 times.

Initially pushed to the stack.
Popped from the stack when next element is being processed.
Pushed back to the stack because the next element is smaller.
Popped from the stack in step 3 of algorithm.
Please see for optimized solution for printing in same order.
