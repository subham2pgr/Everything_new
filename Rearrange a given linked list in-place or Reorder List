Rearrange a given linked list in-place.
Given a singly linked list L0 -> L1 -> … -> Ln-1 -> Ln. Rearrange the nodes in the list so that the new formed list is : L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2 …
You are required to do this in-place without altering the nodes’ values.
Examples:

Input:  1 -> 2 -> 3 -> 4
Output: 1 -> 4 -> 2 -> 3

Input:  1 -> 2 -> 3 -> 4 -> 5
Output: 1 -> 5 -> 2 -> 4 -> 3 
Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
Simple Solution



 

1) Initialize current node as head.
2) While next of current node is not null, do following
    a) Find the last node, remove it from the end and insert it as next
       of the current node.
    b) Move current to next to next of current
Time complexity of the above simple solution is O(n2) where n is the number of nodes in the linked list.

Better Solution
1) Copy contents of given linked list to a vector.
2) Rearrange given vector by swapping nodes from both ends.
3) Copy the modified vector back to the linked list.
Implementation of this approach : https://ide.geeksforgeeks.org/1eGSEy
Thanks to Arushi Dhamija for suggesting this approach.

Efficient Solution:

1) Find the middle point using tortoise and hare method.
2) Split the linked list into two halves using found middle point in step 1.
3) Reverse the second half.
4) Do alternate merge of first and second halves. 
Time Complexity of this solution is O(n).

Below is the implementation of this method.

filter_none
edit
play_arrow

brightness_4
// C++ program to rearrange a linked list in-place 
#include <bits/stdc++.h> 
using namespace std; 
  
// Linkedlist Node structure 
struct Node { 
    int data; 
    struct Node* next; 
}; 
  
// Function to create newNode in a linkedlist 
Node* newNode(int key) 
{ 
    Node* temp = new Node; 
    temp->data = key; 
    temp->next = NULL; 
    return temp; 
} 
  
// Function to reverse the linked list 
void reverselist(Node** head) 
{ 
    // Initialize prev and current pointers 
    Node *prev = NULL, *curr = *head, *next; 
  
    while (curr) { 
        next = curr->next; 
        curr->next = prev; 
        prev = curr; 
        curr = next; 
    } 
  
    *head = prev; 
} 
  
// Function to print the linked list 
void printlist(Node* head) 
{ 
    while (head != NULL) { 
        cout << head->data << " "; 
        if (head->next) 
            cout << "-> "; 
        head = head->next; 
    } 
    cout << endl; 
} 
  
// Function to rearrange a linked list 
void rearrange(Node** head) 
{ 
    // 1) Find the middle point using tortoise and hare method 
    Node *slow = *head, *fast = slow->next; 
    while (fast && fast->next) { 
        slow = slow->next; 
        fast = fast->next->next; 
    } 
  
    // 2) Split the linked list in two halves 
    // head1, head of first half    1 -> 2 
    // head2, head of second half   3 -> 4 
    Node* head1 = *head; 
    Node* head2 = slow->next; 
    slow->next = NULL; 
  
    // 3) Reverse the second half, i.e.,  4 -> 3 
    reverselist(&head2); 
  
    // 4) Merge alternate nodes 
    *head = newNode(0); // Assign dummy Node 
  
    // curr is the pointer to this dummy Node, which will 
    // be used to form the new list 
    Node* curr = *head; 
    while (head1 || head2) { 
        // First add the element from list 
        if (head1) { 
            curr->next = head1; 
            curr = curr->next; 
            head1 = head1->next; 
        } 
  
        // Then add the element from the second list 
        if (head2) { 
            curr->next = head2; 
            curr = curr->next; 
            head2 = head2->next; 
        } 
    } 
  
    // Assign the head of the new list to head pointer 
    *head = (*head)->next; 
} 
  
// Driver program 
int main() 
{ 
    Node* head = newNode(1); 
    head->next = newNode(2); 
    head->next->next = newNode(3); 
    head->next->next->next = newNode(4); 
    head->next->next->next->next = newNode(5); 
  
    printlist(head); // Print original list 
    rearrange(&head); // Modify the list 
    printlist(head); // Print modified list 
    return 0; 
} 
Output:
1 -> 2 -> 3 -> 4 -> 5 
1 -> 5 -> 2 -> 4 -> 3
Time Complexity: O(n)
Auxiliary Space: O(1)
