Smallest Difference pair of values between two unsorted Arrays
Given two arrays of integers, compute the pair of values (one value in each array) with the smallest (non-negative) difference. Return the difference.

Examples :

Input : A[] = {l, 3, 15, 11, 2}
        B[] = {23, 127, 235, 19, 8} 
Output : 3  
That is, the pair (11, 8) 

Input : A[] = {l0, 5, 40}
        B[] = {50, 90, 80} 
Output : 10
That is, the pair (40, 50)


 

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
A simple solution is to Brute Force using two loops with Time Complexity O(n2).

A better solution is to sort the arrays. Once the arrays are sorted, we can find the minimum difference by iterating through the arrays using the approach discussed in below post.

Find the closest pair from two sorted arrays

Consider the following two arrays:
A: {l, 2, 11, 15}
B: {4, 12, 19, 23, 127, 235}

1. Suppose a pointer a points to the beginning of A and a pointer b points to the beginning of B. The current difference between a and bis 3. Store this as the min.

2. How can we (potentially) make this difference smaller? Well, the value at bis bigger than the value at a, so moving b will only make the difference larger. Therefore, we want to move a.

3. Now a points to 2 and b (still) points to 4. This difference is 2, so we should update min. Move a, since it is smaller.

4. Now a points to 11 and b points to 4. Move b.

5. Now a points to 11 and b points to 12. Update min to 1. Move b. And so on.

Below is the implementation of the idea.
filter_none
edit
play_arrow

brightness_4
// C++ Code to find Smallest  
// Difference between two Arrays 
#include <bits/stdc++.h> 
using namespace std; 
  
// function to calculate Small  
// result between two arrays 
int findSmallestDifference(int A[], int B[], 
                           int m, int n) 
{ 
    // Sort both arrays using 
    // sort function 
    sort(A, A + m); 
    sort(B, B + n); 
  
    int a = 0, b = 0; 
  
    // Initialize result as max value 
    int result = INT_MAX; 
  
    // Scan Both Arrays upto  
    // sizeof of the Arrays 
    while (a < m && b < n) 
    { 
        if (abs(A[a] - B[b]) < result) 
            result = abs(A[a] - B[b]); 
  
        // Move Smaller Value 
        if (A[a] < B[b]) 
            a++; 
  
        else
            b++; 
    } 
  
    // return final sma result 
    return result;  
} 
  
// Driver Code 
int main() 
{ 
    // Input given array A 
    int A[] = {1, 2, 11, 5}; 
  
    // Input given array B 
    int B[] = {4, 12, 19, 23, 127, 235}; 
  
  
    // Calculate size of Both arrays 
    int m = sizeof(A) / sizeof(A[0]); 
    int n = sizeof(B) / sizeof(B[0]); 
  
    // Call function to print  
    // smallest result 
    cout << findSmallestDifference(A, B, m, n); 
  
    return 0; 
} 

Output :
1
This algorithm takes O(m log m + n log n) time to sort and O(m + n) time to find the minimum difference. Therefore, the overall runtime is O(m log m + n log n).

This article is contributed by Mr. Somesh Awasthi. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.

